stages:
  - test
  - build
  - manifest
  - scan

variables:
  TAG: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
  APP_ENV: staging
  PROD_BRANCH: master
  STAGING_BRANCH: staging
  DOCKER_BASE_VERSION: "2.2.0"
  PHP_VERSION: "8.0"
  NGINX_VERSION: "1.21"
  VARNISH: "false"
  TEST_PHPSTAN: "false"
  TEST_LINT_TWIG: "true"
  TEST_LINT_YAML: "true"
  TEST_LINT_CONTAINER: "true"

test:
  stage: test
  image: git.e-conomix.at:5050/cors/docker/php-alpine-cli:$PHP_VERSION-$DOCKER_BASE_VERSION
  variables:
    DATABASE_HOST: ""
    DATABASE_PORT: ""
    DATABASE_USER: ""
    DATABASE_PASSWORD: ""
    DATABASE_NAME: ""
    DATABASE_VERSION: "8.0.26"
  cache:
    paths:
      - vendor/
  before_script:
    - composer install
  script:
    - vendor/bin/ecs check src
    - if [ "$TEST_LINT_TWIG" = "true" ] ; bin/console lint:twig templates; fi
    - if [ "$TEST_LINT_TWIG" = "true" ] ; bin/console lint:twig themes; fi
    - if [ "$TEST_LINT_YAML" = "true" ] ; bin/console lint:yaml config; fi
    - if [ "$TEST_LINT_CONTAINER" = "true" ] ; bin/console lint:container; fi
    - if [ "$VARNISH" = "true" ] ; then vendor/bin/phpstan analyse src; fi
  tags:
    - cors

.scan:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  stage: scan
  needs:
    - build_and_push
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      when: on_success
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  allow_failure: true
  before_script:
    - echo "scan image"
  after_script:
    - echo "scan complete"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Prints full report
    - time trivy image --exit-code 0 --timeout 15m0s "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL --timeout 15m0s "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  tags:
    - cors

build_and_push:
  stage: build
  image: docker:stable
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH
      variables:
        APP_ENV: prod
    - if: $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      variables:
        APP_ENV: staging
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      when: on_success
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - printenv
    - docker build . --tag $CI_REGISTRY_IMAGE/php-alpine-fpm:$TAG           --target=cors_php             --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"
    - docker build . --tag $CI_REGISTRY_IMAGE/php-alpine-fpm-blackfire:$TAG --target=cors_php_blackfire   --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"
    - docker build . --tag $CI_REGISTRY_IMAGE/php-alpine-supervisord:$TAG   --target=cors_php_supervisord --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"
    - docker build . --tag $CI_REGISTRY_IMAGE/php-alpine-cli:$TAG           --target=cors_php_cli         --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"
    - docker build . --tag $CI_REGISTRY_IMAGE/nginx:$TAG                    --target=cors_nginx           --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"
    - if [ "$VARNISH" = "true" ] ; then docker build . --tag $CI_REGISTRY_IMAGE/varnish:$TAG --target=cors_varnish --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION" --build-arg NGINX_VERSION="$NGINX_VERSION"; fi

    - docker push $CI_REGISTRY_IMAGE/php-alpine-fpm:$TAG
    - docker push $CI_REGISTRY_IMAGE/php-alpine-fpm-blackfire:$TAG
    - docker push $CI_REGISTRY_IMAGE/php-alpine-supervisord:$TAG
    - docker push $CI_REGISTRY_IMAGE/php-alpine-cli:$TAG
    - docker push $CI_REGISTRY_IMAGE/nginx:$TAG
    - if [ "$VARNISH" = "true" ] ; then docker push $CI_REGISTRY_IMAGE/varnish:$TAG; fi
  tags:
    - cors

scan_php:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/php-alpine-fpm:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

scan_php_blackfire:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/php-alpine-fpm-blackfire:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

scan_php_supervisord:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/php-alpine-supervisord:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

scan_php_cli:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/php-alpine-cli:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

scan_nginx:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

scan_varnish:
  extends:
    - .scan
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: ($CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH) && $VARNISH == "true"
      when: on_success
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/varnish:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

update_manifest:
  stage: manifest
  image: docker:latest
  needs:
    - job: build_and_push
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      when: on_success
  variables:
    CD_GIT_REPOSITORY: git.e-conomix.at/cors/$CD_CHART_REPO.git
    CD_GIT_REPOSITORY_PATH: $CD_CHART_REPO
    CD_MANIFEST_VALUES_FILE: values-$CI_COMMIT_REF_NAME.yaml
  script:
    - apk add --no-cache git yq
    - git config --global user.name $CI_PROJECT_NAME
    - git config --global user.email $CI_PROJECT_NAME"-manifest@cors.gmbh"
    - git clone https://gitlab-ci-token:${CD_PUSH_TOKEN}@${CD_GIT_REPOSITORY} repo
    - cd repo
    - git checkout $CI_COMMIT_REF_NAME 2>/dev/null || $CI_COMMIT_REF_NAME checkout -b foo

    - yq -i eval ".pimcore.pimcore.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.nginx.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.supervisord.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.pimcore.cli.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE

    - if [ "$VARNISH" = "true" ]; then yq -i eval ".pimcore.varnish.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE; fi

    - git commit -am "[$CI_COMMIT_REF_NAME] update $CD_MANIFEST_VALUES_FILE to \"$TAG\""
    - git push origin $CI_COMMIT_REF_NAME
  tags:
    - cors