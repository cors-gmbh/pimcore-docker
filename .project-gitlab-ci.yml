stages:
  - test
  - build
  - scan
  - manifest

variables:
  TAG: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
  APP_ENV: staging
  PROD_BRANCH: master
  STAGING_BRANCH: staging
  DOCKER_BASE_VERSION: "1.5.1"
  PHP_VERSION: "8.0"

  IMAGE_NAME_FPM: $CI_REGISTRY_IMAGE/php-alpine-fpm:${TAG}
  IMAGE_NAME_FPM_BLACKFIRE: $CI_REGISTRY_IMAGE/php-alpine-fpm-blackfire:${TAG}
  IMAGE_NAME_SUPERVISORD: $CI_REGISTRY_IMAGE/php-alpine-supervisord:${TAG}
  IMAGE_NAME_CLI: $CI_REGISTRY_IMAGE/php-alpine-cli:${TAG}
  IMAGE_NAME_NGINX: $CI_REGISTRY_IMAGE/nginx:${TAG}

test:
  stage: test
  image: git.e-conomix.at:5050/cors/docker/php-alpine-cli:$PHP_VERSION-$DOCKER_BASE_VERSION
  variables:
    DATABASE_HOST: ""
    DATABASE_PORT: ""
    DATABASE_USER: ""
    DATABASE_PASSWORD: ""
    DATABASE_NAME: ""
    DATABASE_VERSION: "8.0.26"
  cache:
    paths:
      - vendor/
  before_script:
    - composer install
  script:
    - vendor/bin/ecs check src
  tags:
    - cors

.scan:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  stage: scan
  needs:
    - build_and_push
  rules:
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  allow_failure: true
  before_script:
    - echo "scan image"
  after_script:
    - echo "scan complete"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  tags:
    - cors

build_and_push:
  stage: build
  image: docker:stable
  rules:
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH
      variables:
        APP_ENV: prod
    - if: $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      variables:
        APP_ENV: staging
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker build . --tag $IMAGE_NAME_FPM --target=cors_php --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION"
    - docker build . --tag $IMAGE_NAME_FPM_BLACKFIRE --target=cors_php_blackfire --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION"
    - docker build . --tag $IMAGE_NAME_SUPERVISORD --target=cors_php_supervisord --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION"
    - docker build . --tag $IMAGE_NAME_CLI --target=cors_php_cli --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION"
    - docker build . --tag $IMAGE_NAME_NGINX --target=cors_nginx --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" --build-arg APP_ENV="$APP_ENV" --build-arg PHP_VERSION="$PHP_VERSION"

    - docker push $IMAGE_NAME_FPM
    - docker push $IMAGE_NAME_FPM_BLACKFIRE
    - docker push $IMAGE_NAME_SUPERVISORD
    - docker push $IMAGE_NAME_CLI
    - docker push $IMAGE_NAME_NGINX
  tags:
    - cors

scan_php:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $IMAGE_NAME_FPM

scan_php_blackfire:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $IMAGE_NAME_FPM_BLACKFIRE

scan_php_supervisord:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $IMAGE_NAME_SUPERVISORD

scan_php_cli:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $IMAGE_NAME_CLI

scan_nginx:
  extends:
    - .scan
  variables:
    FULL_IMAGE_NAME: $IMAGE_NAME_NGINX

update_manifest:
  stage: manifest
  image: docker:latest
  needs:
    - job: build_and_push
  rules:
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
  variables:
    CD_GIT_REPOSITORY: git.e-conomix.at/cors/$CD_CHART_REPO.git
    CD_GIT_REPOSITORY_PATH: $CD_CHART_REPO
    CD_MANIFEST_VALUES_FILE: values-$CI_COMMIT_REF_NAME.yaml
  script:
    - apk add --no-cache git yq
    - git config --global user.name $CI_PROJECT_NAME
    - git config --global user.email $CI_PROJECT_NAME"-manifest@cors.gmbh"
    - git clone https://gitlab-ci-token:${CD_PUSH_TOKEN}@${CD_GIT_REPOSITORY} repo
    - cd repo
    - git checkout $CI_COMMIT_REF_NAME 2>/dev/null || $CI_COMMIT_REF_NAME checkout -b foo

    - yq -i eval ".pimcore.pimcore.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.nginx.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.supervisord.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.pimcore.cli.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE

    - git commit -am "[$CI_COMMIT_REF_NAME] update $CD_MANIFEST_VALUES_FILE to \"$TAG\""
    - git push origin $CI_COMMIT_REF_NAME
  tags:
    - cors