name: Reusable Build Workflow

on:
  workflow_call:
    inputs:
      component:
        required: true
        type: string
      matrix:
        required: true
        type: string

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  IMAGICK_VERSION_FROM_SRC: 28f27044e435a2b203e32675e942eb8de620ee58

jobs:
  build:
    name: >
      Build ${{ inputs.component }}
      ${{ matrix.arch }}/${{ matrix.php_version || matrix.nginx_version }}${{ matrix.php_type && '/' }}${{ matrix.php_type || '' }}${{ matrix.alpine && '/' }}${{ matrix.alpine || '' }}
    runs-on: ${{ matrix.arch == 'amd' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set Image Name
        id: image_name
        run: |
          FROM_IMAGE=""
          if [ "${{ inputs.component }}" == "php" ]; then
            IMAGE_NAME=php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-${{ matrix.php_type }}
          elif [ "${{ inputs.component }}" == "php-debug" ]; then
            IMAGE_NAME=php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-${{ matrix.php_type }}-debug
            FROM_IMAGE=ghcr.io/${{ github.repository }}/php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-${{ matrix.php_type }}:${{ matrix.php_version }}-LATEST
          elif [ "${{ inputs.component }}" == "php-blackfire" ]; then
            IMAGE_NAME=php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-fpm-blackfire
            FROM_IMAGE=ghcr.io/${{ github.repository }}/php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-fpm:${{ matrix.php_version }}-LATEST
          elif [ "${{ inputs.component }}" == "supervisord" ]; then
            IMAGE_NAME=php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-supervisord
            FROM_IMAGE=ghcr.io/${{ github.repository }}/php-alpine-${{ matrix.arch }}-${{ matrix.alpine }}-cli:${{ matrix.php_version }}-LATEST
          elif [ "${{ inputs.component }}" == "nginx" ]; then
            IMAGE_NAME=nginx-${{ matrix.arch }}
          fi
          
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "FROM_IMAGE=$FROM_IMAGE" >> $GITHUB_ENV

      - name: Pull Latest Image for Cache
        run: |
          REGISTRY=ghcr.io/${{ github.repository }}
          docker pull $REGISTRY/$IMAGE_NAME:${{ matrix.php_version || matrix.nginx_version }}-LATEST || echo "No cache available"

      - name: Build Docker Image
        id: build
        run: |
          DOCKERFILE=Dockerfile

          if [ "${{ inputs.component }}" == "php-debug" ]; then
            DOCKERFILE=Dockerfile-debug
          elif [ "${{ inputs.component }}" == "php-blackfire" ]; then
            DOCKERFILE=Dockerfile-blackfire
          elif [ "${{ inputs.component }}" == "supervisord" ]; then
            DOCKERFILE=Dockerfile-supervisord
          elif [ "${{ inputs.component }}" == "nginx" ]; then
            DOCKERFILE=Dockerfile-nginx
          fi

          REGISTRY=ghcr.io/${{ github.repository }}

          docker build \
            -f $DOCKERFILE \
            --tag $REGISTRY/$IMAGE_NAME:${{ matrix.php_version || matrix.nginx_version }}-LATEST \
            --build-arg PHP_VERSION=${{ matrix.php_version || '' }} \
            $(if [ -n "${{ env.FROM_IMAGE }}" ]; then echo "--build-arg FROM=${{ env.FROM_IMAGE }}"; fi) \
            --build-arg PHP_TYPE=${{ matrix.php_type || '' }} \
            --build-arg ALPINE_VERSION=${{ matrix.alpine || '' }} \
            --build-arg IMAGICK_VERSION_FROM_SRC=${{ env.IMAGICK_VERSION_FROM_SRC || '' }} \
            --build-arg NGINX_VERSION=${{ matrix.nginx_version || '' }} .

      - name: Push Docker Image
        id: push
        run: |
          docker push ghcr.io/${{ github.repository }}/$IMAGE_NAME:${{ matrix.php_version || matrix.nginx_version }}-LATEST

      - name: Get Image Digest
        id: get_digest
        run: |
          REGISTRY=ghcr.io/${{ github.repository }}
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REGISTRY/$IMAGE_NAME:${{ matrix.php_version || matrix.nginx_version }}-LATEST | cut -d '@' -f 2)
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "IMAGE_DIGEST=$DIGEST" # Output to logs for debugging

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ env.IMAGE_DIGEST }}
          push-to-registry: true

  manifest_create_matrix:
    name: Manifest Matrix
    needs: build
    runs-on: ubuntu-22.04
    outputs:
      manifest_matrix: "${{ steps.manifest_create_matrix.outputs.matrix }}"
    steps:
      - name: Filter Matrix to Exclude `arch`
        id: filter_matrix
        run: |
          MATRIX='' | jq -c .
          echo "matrix<<DELIMITER" >> ${GITHUB_OUTPUT}
          echo "$(echo $MATRIX | jq -c 'del(.arch)')" >> $GITHUB_OUTPUT
          echo "DELIMITER" >> ${GITHUB_OUTPUT}

  manifest:
    name:
      Manifest 
      ${{ inputs.component }}
      ${{ matrix.php_version || matrix.nginx_version }}${{ matrix.php_type && '/' }}${{ matrix.php_type || '' }}${{ matrix.alpine && '/' }}${{ matrix.alpine || '' }}
    needs: manifest_create_matrix
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.manifest_create_matrix.outputs.manifest_matrix) }}
    steps:
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create and Push Multi-Arch Manifest
        run: |
          REGISTRY=ghcr.io/${{ github.repository }}

          # Extract values from matrix
          PHP_VERSION=${{ matrix.php_version }}
          NGINX_VERSION=${{ matrix.nginx_version }}
          ALPINE=${{ matrix.alpine }}
          PHP_TYPE=${{ matrix.php_type }}

          # Determine the image name and tag
          IMAGE_TAG=${PHP_VERSION:-${NGINX_VERSION}}-LATEST
          IMAGE_NAME=${{ inputs.component }}

          docker manifest create \
            $REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
            --amend $REGISTRY/$IMAGE_NAME-amd:$IMAGE_TAG \
            --amend $REGISTRY/$IMAGE_NAME-arm:$IMAGE_TAG

          docker manifest push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG