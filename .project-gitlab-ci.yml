stages:
  - test
  - build
  - manifest
#  - scan

variables:
  TAG: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
  APP_ENV: staging
  PROD_BRANCH: master
  STAGING_BRANCH: staging
  DOCKER_BASE_VERSION: "4.0.0"
  PHP_VERSION: "8.2"
  NGINX_VERSION: "1.21"
  ALPINE_VERSION: "3.18"
  VARNISH: "false"
  TEST_PHPSTAN: "false"
  TEST_LINT_TWIG: "true"
  TEST_LINT_YAML: "true"
  TEST_LINT_CONTAINER: "true"
  GCP_URL: europe-west3-docker.pkg.dev
  TEST_IMAGE: git.e-conomix.at:5050/cors/docker/php-alpine-cli
  REGISTRY_URL: $GCP_URL/cors-wolke/cors/docker
  ADDITIONAL_BRANCH: any-additional-branch-to-build

test:
  stage: test
  image: $TEST_IMAGE:$PHP_VERSION-$DOCKER_BASE_VERSION
  variables:
    DATABASE_HOST: ""
    DATABASE_PORT: ""
    DATABASE_USER: ""
    DATABASE_PASSWORD: ""
    DATABASE_NAME: ""
    DATABASE_VERSION: "8.0.26"
  cache:
    paths:
      - vendor/
  before_script:
    - composer install
  script:
    - vendor/bin/ecs check src
    - if [ "$TEST_LINT_TWIG" = "true" ] ; then bin/console lint:twig templates; fi
    - if [ "$TEST_LINT_TWIG" = "true" ] ; then bin/console lint:twig themes; fi
    - if [ "$TEST_LINT_YAML" = "true" ] ; then bin/console lint:yaml config; fi
    - if [ "$TEST_LINT_CONTAINER" = "true" ] ; then bin/console lint:container; fi
    - if [ "$TEST_PHPSTAN" = "true" ] ; then vendor/bin/phpstan analyse src; fi
  tags:
    - cors

build_and_push:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.12.1-debug
    entrypoint: [ "" ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH
      variables:
        APP_ENV: prod
    - if: $CI_COMMIT_REF_NAME == $STAGING_BRANCH
      variables:
        APP_ENV: staging
    - if: $CI_COMMIT_REF_NAME == $ADDITIONAL_BRANCH
      variables:
        APP_ENV: $ADDITIONAL_BRANCH
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH || $CI_COMMIT_REF_NAME == $ADDITIONAL_BRANCH
      when: on_success
  before_script:
    - echo "{\"auths\":\"https://$GCP_URL\":{\"auth\":\"$(echo -n "_json_key":$(base64 -d $GOOGLE_ARTIFACT_REGISTRY) | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - export GCP_REGISTRY_IMAGE=$(echo "$GCP_URL/cors-wolke/$CI_PROJECT_PATH" | tr '[:upper:]' '[:lower:]')
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --cache=true
      --dockerfile "Dockerfile"
      --target=cors_php
      --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
      --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
      --build-arg APP_ENV="$APP_ENV" 
      --build-arg PHP_VERSION="$PHP_VERSION" 
      --build-arg NGINX_VERSION="$NGINX_VERSION" 
      --build-arg ALPINE_VERSION="$ALPINE_VERSION" 
      --build-arg REGISTRY_URL="$REGISTRY_URL"
      --destination $GCP_REGISTRY_IMAGE/php-alpine-fpm:$TAG
      --destination $GCP_REGISTRY_IMAGE/php-alpine-fpm:LATEST-$CI_COMMIT_REF_NAME

    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --cache=true
      --dockerfile "Dockerfile"
      --target=cors_php_blackfire
      --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
      --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
      --build-arg APP_ENV="$APP_ENV" 
      --build-arg PHP_VERSION="$PHP_VERSION" 
      --build-arg NGINX_VERSION="$NGINX_VERSION" 
      --build-arg ALPINE_VERSION="$ALPINE_VERSION" 
      --build-arg REGISTRY_URL="$REGISTRY_URL"
      --destination $GCP_REGISTRY_IMAGE/php-alpine-fpm-blackfire:$TAG
      --destination $GCP_REGISTRY_IMAGE/php-alpine-fpm-blackfire:LATEST-$CI_COMMIT_REF_NAME

    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --cache=true
      --dockerfile "Dockerfile"
      --target=cors_php_supervisord
      --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
      --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
      --build-arg APP_ENV="$APP_ENV" 
      --build-arg PHP_VERSION="$PHP_VERSION" 
      --build-arg NGINX_VERSION="$NGINX_VERSION" 
      --build-arg ALPINE_VERSION="$ALPINE_VERSION" 
      --build-arg REGISTRY_URL="$REGISTRY_URL"
      --destination $GCP_REGISTRY_IMAGE/php-alpine-supervisord:$TAG
      --destination $GCP_REGISTRY_IMAGE/php-alpine-supervisord:LATEST-$CI_COMMIT_REF_NAME

    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --cache=true
      --dockerfile "Dockerfile"
      --target=cors_php_cli
      --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
      --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
      --build-arg APP_ENV="$APP_ENV" 
      --build-arg PHP_VERSION="$PHP_VERSION" 
      --build-arg NGINX_VERSION="$NGINX_VERSION" 
      --build-arg ALPINE_VERSION="$ALPINE_VERSION" 
      --build-arg REGISTRY_URL="$REGISTRY_URL"
      --destination $GCP_REGISTRY_IMAGE/php-alpine-cli:$TAG
      --destination $GCP_REGISTRY_IMAGE/php-alpine-cli:LATEST-$CI_COMMIT_REF_NAME

    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --cache=true
      --dockerfile "Dockerfile"
      --target=cors_nginx
      --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
      --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
      --build-arg APP_ENV="$APP_ENV" 
      --build-arg PHP_VERSION="$PHP_VERSION" 
      --build-arg NGINX_VERSION="$NGINX_VERSION" 
      --build-arg ALPINE_VERSION="$ALPINE_VERSION" 
      --build-arg REGISTRY_URL="$REGISTRY_URL"
      --destination $GCP_REGISTRY_IMAGE/nginx:$TAG
      --destination $GCP_REGISTRY_IMAGE/nginx:LATEST-$CI_COMMIT_REF_NAME

    - if [ "$VARNISH" = "true" ] ; then
          /kaniko/executor
            --context $CI_PROJECT_DIR
            --cache=true
            --dockerfile "Dockerfile"
            --target=cors_varnish
            --build-arg DOCKER_BASE_VERSION="$DOCKER_BASE_VERSION" 
            --build-arg COMPOSER_AUTH="$COMPOSER_AUTH" 
            --build-arg APP_ENV="$APP_ENV" 
            --build-arg PHP_VERSION="$PHP_VERSION"
            --build-arg NGINX_VERSION="$NGINX_VERSION"
            --build-arg ALPINE_VERSION="$ALPINE_VERSION"
            --build-arg REGISTRY_URL="$REGISTRY_URL"
            --destination $GCP_REGISTRY_IMAGE/varnish:$TAG
            --destination $GCP_REGISTRY_IMAGE/varnish:LATEST-$CI_COMMIT_REF_NAME
      fi
  tags:
    - cors

update_manifest:
  stage: manifest
  image: docker:latest
  needs:
    - job: build_and_push
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $PROD_BRANCH || $CI_COMMIT_REF_NAME == $STAGING_BRANCH || $CI_COMMIT_REF_NAME == $ADDITIONAL_BRANCH
      when: on_success
  variables:
    CD_GIT_REPOSITORY: git.e-conomix.at/cors/$CD_CHART_REPO.git
    CD_GIT_REPOSITORY_PATH: $CD_CHART_REPO
    CD_MANIFEST_VALUES_FILE: values-$CI_COMMIT_REF_NAME.yaml
  script:
    - apk add --no-cache git yq
    - git config --global user.name $CI_PROJECT_NAME
    - git config --global user.email $CI_PROJECT_NAME"-manifest@cors.gmbh"
    - git clone https://gitlab-ci-token:${CD_PUSH_TOKEN}@${CD_GIT_REPOSITORY} repo
    - cd repo
    - git checkout $CI_COMMIT_REF_NAME 2>/dev/null || $CI_COMMIT_REF_NAME checkout -b foo

    - yq -i eval ".pimcore.pimcore.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.nginx.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.supervisord.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE
    - yq -i eval ".pimcore.pimcore.cli.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE

    - if [ "$VARNISH" = "true" ]; then yq -i eval ".pimcore.varnish.image.tag = \"$TAG\"" $CD_MANIFEST_VALUES_FILE; fi

    - git commit -am "[$CI_COMMIT_REF_NAME] update $CD_MANIFEST_VALUES_FILE to \"$TAG\""
    - git push origin $CI_COMMIT_REF_NAME
  tags:
    - cors